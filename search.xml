<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Configuring Phicomm FS3812</title>
      <link href="/2024/06/11/Phicomm-FS3812/"/>
      <url>/2024/06/11/Phicomm-FS3812/</url>
      
        <content type="html"><![CDATA[<p>之前工场的人问有没有斐讯 FS3812 的配置文档, 我找了一圈没找到, 还在想为啥他们要找这玩意的文档. 这两天要考试了, 到了我最喜欢的摸鱼环节, 去一看发现工场不知道从哪搞了个这, 结果不会配置. 于是本着死马当活马医的原则, 我折腾了一下这玩意.</p><span id="more"></span><h2 id="Introduction-to-Phicomm-FS3812"><a href="#Introduction-to-Phicomm-FS3812" class="headerlink" title="Introduction to Phicomm FS3812"></a>Introduction to Phicomm FS3812</h2><p>斐讯 FS3812 是一款 <strong>弱三层</strong> 网管交换机, 有 8 个千兆电口, 12 个万兆光口和两个 Console 口. 交换机的功耗不高, 根据介绍 (没测过) 包转发率 360Mpps, 交换容量 512Gbps (假的吧, 所有端口全跑满也没这个量啊). 由于斐讯的特性, 网上并不能找到什么说明书, 所以很花了一点时间才搞定.</p><div style="display: flex;"><div style="width: 50%; margin: auto;"><p><img src="/2024/06/11/Phicomm-FS3812/fs3812.png" alt="FS3812"></p></div></div><p><em>参考: <a href="https://b2b.homedo.com/goods/100118204.html">某不知名卖家的商品详情页</a></em></p><h2 id="Console"><a href="#Console" class="headerlink" title="Console"></a>Console</h2><p>拿到交换机的时候里面是有配置的, 我们并不知道是什么配置, 管理界面也没有. 插上平常用的 Console 线之后没有任何反应, 感觉跟坏了一样. 但是插上线确实是能识别, 所以还是得试试. 那么我们要做的第一件事就是恢复出厂设置, 第 0 件事就是搞明白怎么连接 Console 并进入 U-Boot 给他恢复出厂.</p><h3 id="确认-GND-线"><a href="#确认-GND-线" class="headerlink" title="确认 GND 线"></a>确认 GND 线</h3><p>Console 那一排其实有两个口. 上面一个和一个网络变压器连着, 用电脑怼上去可以握手到 1000M, 是个网口; 下面一个网线接上去没反应, 应该是 Console. 但是这个 Console 也不标准.</p><p>既然直接用 Console 线连上去没有反应, 我们就要使用经典的 CH340 了. 找一个烂网线剪断一截然后把每一根线剥开, 我们就得到了可以用来测量线序的线.</p><p>这里要注意一个常见问题: 我们一般认为外壳是 <strong>接地</strong> 的, 但是这个 <em>地</em> 是大地, 可能并不是直流电路板的负极 <em>GND</em>. 这块板子就是这样. 一开始我那示波器一端接外壳, 一端量线, 结果每一个上面都有 50Hz 的杂波, 万用表量也不通. 后来我发现这件事之后从板子上的滤波电容一端取点, 找到了 <strong>GND 为棕色和蓝白两条线</strong>.</p><div style="display: flex; flex-direction: row;"><div style="width: 20%; margin: auto;"><p><img src="/2024/06/11/Phicomm-FS3812/console-rj45.jpg" alt="RJ45 Console"></p></div><div style="width: 25%; margin: auto;"><p><img src="/2024/06/11/Phicomm-FS3812/console-gnd.jpg" alt="Console GND"></p></div></div><h3 id="确认-TX-线"><a href="#确认-TX-线" class="headerlink" title="确认 TX 线"></a>确认 TX 线</h3><p>在确认 GND 之后, 最好确认的线自然是 TX 了 - 只要看看哪一个在开机之后有信号就行. 把示波器一端接 GND, 另一端夹在某一跟线上, 看看开机之后有没有波动. 发现 <strong>绿白线</strong> 有信号, 说明这是 TX.</p><h3 id="确认电平"><a href="#确认电平" class="headerlink" title="确认电平"></a>确认电平</h3><p>首先拿到几个线序之后上网搜一下, 结果既不是 TTL, 也不是 RS232, 好像也不是 RS485. 只好手动调电平确认 RX 了.</p><p>等交换机启动之后, TX 线上为 0V. 根据串口协议的电平定义, 知 0V 为逻辑 1. 将示波器触发调到 2V 并开机单次触发, 发现 TX 的峰值是 5V, 说明这是 RS232 电平, 5V 为逻辑 0.</p><p>然而手上的 CH340 是 TTL 电平. 手头有非门, 将 TX 和 RX 都过一遍非门, 就可以将 TTL 电平转换为 RS232 电平.</p><h3 id="确认串口参数"><a href="#确认串口参数" class="headerlink" title="确认串口参数"></a>确认串口参数</h3><p>然后开机, 单次触发, 测量最短脉冲宽度对应频率约为 8us, 波特率应该是 115200. 由于并没有逻辑分析仪啥的, 我直接尝试 8n1, 显示正常. 此时单向信道已经建立.</p><h3 id="确认-RX-线"><a href="#确认-RX-线" class="headerlink" title="确认 RX 线"></a>确认 RX 线</h3><p>确认 RX 需要回显. 登录页有个 <code>Password:</code> 的提示, 理论上按回车一定有回显. 所以选择按住回车检查 TX 有没有发送信号. 得到的结果是 <strong>RX 是绿线</strong>. 还有几根线不清楚到底是干嘛的, 其中有一根好像是片选 (CS), 拉高会导致 TX 啥也没了.</p><div style="display: flex;"><div style="width: 50%; margin: auto;"><p><img src="/2024/06/11/Phicomm-FS3812/console.jpg" alt="Console"></p></div></div><p>此时串口算是调通了, 可以进入 U-Boot 恢复出厂设置了. 但是让我完全没有想到的是, 恢复完了之后还有密码… Console 口登不进去.</p><h2 id="Web-Management"><a href="#Web-Management" class="headerlink" title="Web Management"></a>Web Management</h2><p>机器后面其实贴了一个标签写着 192.168.1.100. 但是交换机有那么多口, 我偏偏觉得既然 Console 有个网口, 那么 Web 管理肯定是这个口. 于是折腾了半个多小时也进不去.</p><p>实际上这个交换机的默认设置里面 192.168.1.100 是 VLAN If 1 的地址, 而所有接口 (除了 Console) 都是 Access VLAN 1, 接除了 Console 网口的任意口都能进 Web 管理. 默认 Creds 为 <strong><code>admin:admin</code></strong>. 进去之后基本上都能配置.</p><h2 id="I-want-more"><a href="#I-want-more" class="headerlink" title="I want more!"></a>I want more!</h2><p>本来这篇文章可以到此结束了, 毕竟进去了. 但是串口到头来还是进不去. 于是我又折腾了一下, 搞到了点好东西.</p><h3 id="内部照片"><a href="#内部照片" class="headerlink" title="内部照片"></a>内部照片</h3><div class='fold collapsed'>    <div class='fold-title'>        Pictures    </div>    <div class='fold-content'>        <p>电源模块</p><p><img src="/2024/06/11/Phicomm-FS3812/inside-power.jpg" alt="Power"></p><p>主板</p><p><img src="/2024/06/11/Phicomm-FS3812/inside-mainboard-l.jpg" alt="Mainboard Left"></p><p><img src="/2024/06/11/Phicomm-FS3812/inside-mainboard-m.jpg" alt="Mainboard Middle"></p><p><img src="/2024/06/11/Phicomm-FS3812/inside-mainboard-r.jpg" alt="Mainboard Right"></p>    </div></div><h3 id="Firmware"><a href="#Firmware" class="headerlink" title="Firmware"></a>Firmware</h3><p>Web 里面可以下载固件, 所以我小小下了一份</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             uImage header, header size: 64 bytes, header CRC: 0x187BF3D7, created: 2014-05-20 03:11:20, image size: 11395763 bytes, Data Address: 0x0, Entry Point: 0x0, data CRC: 0x8B3A062B, OS: Linux, CPU: PowerPC, image type: Multi-File Image, compression type: gzip, image name: &quot;v5.0.10.sp1.fcs&quot;</span><br><span class="line">80            0x50            gzip compressed data, maximum compression, has original file name: &quot;vmlinux.bin.17695&quot;, from Unix, last modified: 2014-05-20 02:51:42</span><br><span class="line">2146540       0x20C0EC        LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: -1 bytes</span><br><span class="line">11386240      0xADBD80        Flattened device tree, size: 9587 bytes, version: 17</span><br></pre></td></tr></table></figure><p><a href="/2024/06/11/Phicomm-FS3812/FS3812_SW_703003504_V1.0.2.bin">FS3812 FW V1.0.2</a></p><h3 id="Web-Image"><a href="#Web-Image" class="headerlink" title="Web Image"></a>Web Image</h3><p>这个其实就是个 .tar.gz 文件, 改个后缀就能解压了. 可以随便改, 随便整活.</p><p><a href="/2024/06/11/Phicomm-FS3812/webimage.bin">WebImage</a></p><h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h3><p>SSH 默认是开启的, <a href="mailto:&#97;&#x64;&#x6d;&#x69;&#x6e;&#x40;&#49;&#57;&#50;&#46;&#x31;&#54;&#x38;&#x2e;&#49;&#46;&#49;&#48;&#x30;">&#97;&#x64;&#x6d;&#x69;&#x6e;&#x40;&#49;&#57;&#50;&#46;&#x31;&#54;&#x38;&#x2e;&#49;&#46;&#49;&#48;&#x30;</a> 密码应该和 Web 一致. 进去之后是管理员权限的交换机 Shell. 固件疑似没有校验, 应该可以改固件使得 SSH 登进去是 Linux Shell.</p><link rel="stylesheet" href="/css/folder.css" type="text/css"><script src="/js/folder.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GoAuthing 在 Windows 上维持校园网登录</title>
      <link href="/2024/03/10/GoAuthingWindows/"/>
      <url>/2024/03/10/GoAuthingWindows/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/z4yx/GoAuthing">GoAuthing</a> 是学长开发的, <a href="https://thu.services/services/#_3">THU Services</a> 推荐的用于 THU 准入认证的应用, 主要用于 Linux 下的命令行自动认证. 部分同学在 Windows 下也有类似的需求 (自动准入, 掉线后自动重连), 在半个小时的脚本小子之后得到了以下方法.</p><span id="more"></span><h2 id="下载-auth-thu"><a href="#下载-auth-thu" class="headerlink" title="下载 auth-thu"></a>下载 auth-thu</h2><p>从 <a href="https://github.com/z4yx/GoAuthing/releases/latest">Github Releases</a> 下载 Windows 应用程序 (.win64.exe), 32 位程序可能需要自行编译. 下载的程序可以直接运行但会闪退 (因为这是个命令行程序).</p><p>把这个程序放到一个妥善的地方保存 (并记下路径, 此处记为 <strong><code>$EXE_PATH$</code></strong>; 并记下所在的文件夹路径, 记为 <strong><code>$EXE_DIR$</code></strong>, 请在后续编辑脚本时 <strong>直接替换</strong>)</p><h2 id="新建配置文件和脚本文件"><a href="#新建配置文件和脚本文件" class="headerlink" title="新建配置文件和脚本文件"></a>新建配置文件和脚本文件</h2><p>在 <code>$EXE_DIR$</code> 下建立配置文件 <code>creds.json</code>, 内容参考 <a href="https://github.com/z4yx/GoAuthing/blob/master/README.md">GoAuthing 帮助文档</a>, 放一份如下:</p><div class='fold collapsed'>    <div class='fold-title'>        示例配置    </div>    <div class='fold-content'>        <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;your-username&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;your-password&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;daemonize&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;campusOnly&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>    </div></div><p>新建脚本文件如下 (记得替换, 记为 <strong><code>$BAT_PATH$</code></strong>):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">:: auth-thu Windows keep online</span><br><span class="line"></span><br><span class="line">:loop_begin</span><br><span class="line">$EXE_PATH$ -c $EXE_DIR$\creds.json auth</span><br><span class="line">$EXE_PATH$ -c $EXE_DIR$\creds.json login</span><br><span class="line">$EXE_PATH$ -c $EXE_DIR$\creds.json online</span><br><span class="line">goto loop_begin</span><br></pre></td></tr></table></figure><p>在 cmd 中运行这个脚本, 如果能正确运行并登录, 可进行下一步. 需要注意的是这个 login 似乎没得用.</p><h2 id="新建任务计划"><a href="#新建任务计划" class="headerlink" title="新建任务计划"></a>新建任务计划</h2><p>(由于咱电脑是英文的, 所以自行脑补中文)</p><p>打开 Computer Management -&gt; System Tools -&gt; Task Scheduler (应该叫任务事件查看器?) -&gt; Library (啥啥程序库)</p><p><img src="/2024/03/10/GoAuthingWindows/TaskScheduler.png" alt="Task Scheduler"></p><p>新建基本事件 -&gt; 在电脑开机时启动 -&gt; 启动程序 -&gt; 启动 <code>$BAT_PATH$</code>, 以 <code>$EXE_DIR$</code> 为工作目录.</p><p><img src="/2024/03/10/GoAuthingWindows/AddBasicTask.png" alt="Add Basic Task"></p><p>新建完成后, 双击事件打开, 勾选 “无论用户时候登录都运行”, “不储存密码”, “使用最高权限运行”;</p><p>打开 “条件” 菜单, 关掉 “只有连接电源才运行”;</p><p>打开 “设置” 菜单, 只打开第一个, 最后那个选第一项, 保存退出.</p><p><img src="/2024/03/10/GoAuthingWindows/ModifyTask.png" alt="Modify Task"></p><p>此时右键启动这个任务, 在正常情况下就能运行并在掉线时自动重连了.</p><h2 id="问题-局限"><a href="#问题-局限" class="headerlink" title="问题 &#x2F; 局限"></a>问题 &#x2F; 局限</h2><p><strong>! IMPORTANT</strong> 由于 .bat 文件比较粗糙, 无法区分登录错误与掉线, 如果改了密码或断网 (物理上) bat 会疯狂重试. 但是 Windows 没有什么好的脚本语言, Python &#x2F; Ruby 要装, Java &#x2F; .Net 要运行库, 原生 C++ 难写地要命, 故先这样凑合用. (自带的那个 systemd 也不咋地) 可能需要改一改 GoAuthing 了.</p><link rel="stylesheet" href="/css/folder.css" type="text/css"><script src="/js/folder.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Setting up Software Router for my Dorm</title>
      <link href="/2024/02/28/DormRouter/"/>
      <url>/2024/02/28/DormRouter/</url>
      
        <content type="html"><![CDATA[<p>近期手痒痒还是想让寝室里的网能有宽带 500M 的下载速度的同时不需要用 SSLVPN 连接校园网. 因此我买了一个 6 网口的软路由 (问就是不想用单臂路由) 并尝试进行了配置.</p><span id="more"></span><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>首先我们来看我自己的需求 (愿景):</p><h3 id="网络现状"><a href="#网络现状" class="headerlink" title="网络现状"></a>网络现状</h3><p>校园网有 <strong>公网 IPv4</strong>, 可以用于开放端口, DDNS, 但是由于寝室的网太垃圾了 (百兆墙线), 也不够稳定, 所以尽量少用; 且校园网 IPv6 只有 DHCPv6 的一个地址.</p><p>宽带网有 <strong>&#x2F;64 的公网 IPv6 后缀</strong> 可以分发, 但是 v4 只有私网地址且访问校园网要 VPN. 同时宽带有 500M 的稳定网速.</p><h3 id="路由计划"><a href="#路由计划" class="headerlink" title="路由计划"></a>路由计划</h3><p>对所有的 Client:</p><ul><li>分配宽带获取的 IPv6 公网地址</li><li>对大多数流量从宽带走</li><li>对校园网流量从校园网走, 免得 VPN</li><li>接入科协的 Tinc &#x2F; 家里的 IPsec, 对这些流量路由过去</li><li>添加 UPnP 服务以实现种子等服务可以从校园网地址 (v4 公网) 访问; 对应的出流量要走校园网</li></ul><h3 id="脚本运行"><a href="#脚本运行" class="headerlink" title="脚本运行"></a>脚本运行</h3><p>要能在上面跑点爬虫啥的</p><hr><h2 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h2><p>为了以上的需求, 我设计了几个可能的系统架构:</p><ul><li>OpenWRT + Docker, OpenWRT 作为物理系统, Docker 上面可以运行脚本. 优点: 配置比较直观; 缺点: 不好本地管理且 OpenWRT 的 Linux 版本实在有点低, 功能也不全.</li><li>ESXi + OpenWRT + Debian, ESXi 作为虚拟化的系统. 优点: 虚拟化之后可以灵活分配资源; 缺点: 虚拟化的性能损失, 对接口的控制较弱</li><li>Debian 软路由. 优点: 高度可定制; 缺点: 很难配置</li><li>Debian + VBox OpenWRT. 优点: GUI, 方便配置; 缺点: 看上去还好</li></ul><p>所以后来我选择了最后一种方案. 先装了 KDE 的 Debian, 然后装 VirtualBox 和 OpenWRT 虚拟机. 然后我就遇到了乱七八糟的问题. 放在后面.</p><hr><h2 id="初次尝试"><a href="#初次尝试" class="headerlink" title="初次尝试"></a>初次尝试</h2><p>为啥叫 <em>初次</em> 尝试呢? 显然是因为失败了. 首先安装了 Debian KDE, 然后在上面装了 VirtualBox, 在虚拟机里面装了 OpenWRT. 一切都那么的丝滑, 直到开始配置 OpenWRT.</p><p>我的软路由有 6 个网口, 我采用了 eth0 接宽带, eth1 接校园网, eth2 接路由器 (AP 模式), eth3 接我的台式机, eth4&#x2F;5 空着当 LAN 口的方式. (其实也可以把台式机的有线网接在路由器上面, 这样就不用配置网桥了, 但是这样不 elegant). 这就要求 eth2~5 四个网口要在机器里面形成一个 <strong>网桥</strong>.</p><p>我们检查 <a href="https://www.virtualbox.org/manual/ch06.html#network_bridged">VirtualBox 的 Bridged Networking 文档</a>, 里面提到</p><blockquote><p>With bridged networking, Oracle VM VirtualBox uses a device driver on your <em>host</em> system that filters data from your physical network adapter.</p><p>This enables Oracle VM VirtualBox to intercept data from the physical network and inject data into it, effectively creating a new network interface in software.</p></blockquote><p>也就是说这个 “网桥” 是通过驱动的方式 “桥接” 的, 并非一个真正的与操作系统的网桥等效的桥. 因此如果桥接到的那个网口 (或者网桥) 上没有介质连接 (NO-CARRIER), 那么操作系统就不会尝试向它发包, 于是乎只有后面接了一些东西, 本机才能使用虚拟机提供的网络.</p><p>那么如果我们将这个 “桥” 桥接到一个网桥上呢? 我们考虑 <a href="https://superuser.com/a/1725894/1870153">网桥的介质情况</a>, 当网桥的任何一个接口都没有接东西的时候, 网桥是 NO-CARRIER 状态, 也就是说 LAN 口至少要有一个接入的设备, 我的 Debian 才能通过 OpenWRT 上网. 这肯定是达不到我的预期的.</p><p>但是 VirtualBox 的文档里还提到:</p><blockquote><p>Even though TAP interfaces are no longer necessary on Linux for bridged networking, you <em>can</em> still use TAP interfaces for certain advanced setups, since you can connect a VM to any host interface.</p></blockquote><p>也就是说我们可以新建一个 TAP 设备并让 VirtualBox 通过标准的方式 <em>桥接</em> 到这个设备, 此时 TAP 设备的状态是有链接的 (UP), 那么整个网桥也就 UP 了. 后来通过这样的方式我成功让宿主机上了网.</p><p>有人就要问了, 那为啥后来还是放弃了呢? 因为宿主机好不容易上了网, 我那笔记本接了条网线上去, 发现获取不到 IP, 这边有发包, 那边用 WireShark 抓包收不到包 (就是这么诡异). 我开了单播包转发和广播包转发也没用, 莫名其妙; 并且一开始的时候我做虚拟化 (方案 2) 是为了防止我把宿主机玩坏了彻底断网, 这个方案似乎没法防止这一点, 倒是用 VirtualBox 跑的问题更多了. 所以我干脆放弃, 用方案 3 了.</p><hr><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><h3 id="IPv4"><a href="#IPv4" class="headerlink" title="IPv4"></a>IPv4</h3><p>装好没有桌面环境的纯净 Debian 之后, 接下来要确定 PPPoE 和校园网用什么工具管理. 在之前我给 <a href="/2024/01/20/StudentFestivalNetwork/" title="Network on Ninetune - A Quick Guide">学生节</a> 和科协的其他设备配网的时候, 用的都是 ifupdown 的那一套东西, 说实话我觉得不太好用而且有些陈旧了; 而且那一套没办法配置 PPPoE 网络, 需要写 <a href="https://wiki.debian.org/PPPoE">一大堆配置文件</a> 或者用 <a href="https://manpages.debian.org/bullseye/pppoeconf/pppoeconf.8.en.html">pppoeconf</a>.</p><p>现代的图形化的 Linux (不管是 Debian 还是 Arch 还是啥的) 用的基本上是 NetworkManager, 因此我这次也决定用 NetworkManager 统一配置整个网络了, 和之前的很不一样.</p><p>由于这套工具有一个叫 <code>nmtui</code> 的 TUI 界面, 因此进行设置的时候还是很方便的. 新建一个网桥把 eth2-5 桥接起来并设置静态 IP 作为 LAN, 再新建一个 Connection 设置动态 IP 接入校园网, 再新建一个 PPP 连接用默认设置填上宽带用户名和密码就好了 (吗?)</p><p>然后我们考虑 LAN 方向, 之前看到 isc-dhcp-server 停止维护了, 希望我们用 dnsmasq 取代. 因此我这次就使用 dnsmasq 配置了 DHCPv4, 没什么特别的地方, 就是在配置文件里面改改.</p><h3 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h3><p>LAN IPv6 就很阴间了 (又是 IPv6!!!). 学校的网用 nmcli DHCPv6 干脆拿不到地址 (啊对真的拿不到, 我按照 <a href="https://pwe.cat/zijing-dhcpv6/">学长的指南</a> 改了还是获取不到), 在 <a href="https://usereg.tsinghua.edu.cn/main.php">自服务-准入在线列表</a> 里面可以看到系统分配了一个诡异的含有大量 <code>ff</code> 的 <code>2402:f000:****:****:****:ffff:ffff:****</code> 地址, 把这个地址以静态方式放到校园网接口的 IPv6 里面 <del>能用</del> 根本不能用. <em>(所以这是怎么来的?)</em></p><p>校园网只给了一个 IPv6 地址, 但是宽带有一整个 <code>/64</code> 段用来 SLAAC. 因此, 我们不给局域网的设备分配需要 NAT6 的 ULA.</p><p>然后宽带网的网络接口 <code>pppx</code> (一般是 <code>ppp0</code> 但是也不一定) 会给一个 <code>100.64.0.0/10</code> 里面的私网地址和一个 <code>2409:*::/64</code> 的 IPv6 段用于 Prefix Delegation. 非常让人头疼的是, Debian 里面 (不像 OpenWRT) 没有一个可以自动进行 Prefix Delegation 的工具. 我需要在 PPPoE 连接之后手动把获取到的地址段放到 LAN 上面. 为此我参考 <a href="https://wiki.debian.org/IPv6PrefixDelegation">Debian Wiki</a> (这还是个 ifupdown 的实现) 写了个 NetworkManager 脚本 <del>(RFC? 不存在的)</del>:</p><p>由于 RA-PD 可能会更改前缀, 我写了一些废话 (因为似乎 radvd 本身就有 <a href="https://manpages.debian.org/testing/radvd/radvd.conf.5.en.html#DeprecatePrefix">对应的可能的处理</a> 和 <a href="https://community.ui.com/questions/Solution-for-client-losing-IPv6-connectivity-after-PPPoE-re-assign-the-new-prefix/4d6c5132-5f54-492c-a47a-b576182157fe#answer/9f11553b-7d2a-44b0-9271-26e3b3410f4d">参考</a>,  (也不完全一样?)).</p><div class='fold collapsed'>    <div class='fold-title'>        /etc/NetworkManager/dispatcher.d/50-ppp-ipv6-prefix-delegation    </div>    <div class='fold-content'>        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">interface = sys.argv[<span class="number">1</span>]</span><br><span class="line">action = sys.argv[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 DHCPv6 有变化时执行</span></span><br><span class="line"><span class="keyword">if</span> action != <span class="string">&quot;dhcp6-change&quot;</span>: exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> interface.startswith(<span class="string">&quot;ppp&quot;</span>): exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Prefix delegation for&quot;</span>, interface)</span><br><span class="line"></span><br><span class="line">addr_output = subprocess.check_output([<span class="string">&quot;ip&quot;</span>, <span class="string">&quot;-6&quot;</span>, <span class="string">&quot;addr&quot;</span>, <span class="string">&quot;show&quot;</span>, interface]).decode(<span class="string">&quot;latin-1&quot;</span>).splitlines()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">obsolete_prefixes = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> addr_output:</span><br><span class="line">    <span class="comment"># 对 GUA 地址</span></span><br><span class="line">    <span class="keyword">match</span> = re.search(<span class="string">&quot;24[0-9a-f:]*/\d+&quot;</span>, line)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">match</span> == <span class="literal">None</span>: <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> ipaddress</span><br><span class="line">    ip = ipaddress.ip_network(<span class="keyword">match</span>[<span class="number">0</span>], strict=<span class="literal">False</span>)</span><br><span class="line">    prefix = ip.network_address</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 把旧地址置 deprecated</span></span><br><span class="line">    old_addr = subprocess.check_output([<span class="string">&quot;ip&quot;</span>, <span class="string">&quot;-6&quot;</span>, <span class="string">&quot;addr&quot;</span>, <span class="string">&quot;show&quot;</span>, <span class="string">&quot;lan-bridge&quot;</span>]).decode(<span class="string">&quot;latin-1&quot;</span>).splitlines()</span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> old_addr:</span><br><span class="line">        <span class="keyword">match</span> = re.search(<span class="string">&quot;24[0-9a-f:]*/\d+&quot;</span>, l)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">match</span> == <span class="literal">None</span>: <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Delete the same prefix so we can add it back later</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">match</span>[<span class="number">0</span>] == <span class="built_in">str</span>(prefix)+<span class="string">&quot;1/64&quot;</span>:</span><br><span class="line">            subprocess.check_output([<span class="string">&quot;ip&quot;</span>, <span class="string">&quot;-6&quot;</span>, <span class="string">&quot;addr&quot;</span>, <span class="string">&quot;delete&quot;</span>, <span class="keyword">match</span>[<span class="number">0</span>], <span class="string">&quot;dev&quot;</span>, <span class="string">&quot;lan-bridge&quot;</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Mark deprecated</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            subprocess.check_output([<span class="string">&quot;ip&quot;</span>, <span class="string">&quot;-6&quot;</span>, <span class="string">&quot;addr&quot;</span>, <span class="string">&quot;change&quot;</span>, <span class="keyword">match</span>[<span class="number">0</span>], <span class="string">&quot;dev&quot;</span>, <span class="string">&quot;lan-bridge&quot;</span>, <span class="string">&quot;preferred_lft&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;valid_lft&quot;</span>, <span class="string">&quot;120&quot;</span>])</span><br><span class="line">            obsolete_prefixes.append(ipaddress.ip_network(<span class="keyword">match</span>[<span class="number">0</span>], strict=<span class="literal">False</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 把新 Prefix 放到接口上</span></span><br><span class="line">    subprocess.check_output([<span class="string">&quot;ip&quot;</span>, <span class="string">&quot;-6&quot;</span>, <span class="string">&quot;addr&quot;</span>, <span class="string">&quot;add&quot;</span>, <span class="built_in">str</span>(prefix)+<span class="string">&quot;1/64&quot;</span>, <span class="string">&quot;dev&quot;</span>, <span class="string">&quot;lan-bridge&quot;</span>, <span class="string">&quot;metric&quot;</span>, <span class="string">&quot;100&quot;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Re-construct /etc/radvd.conf</span></span><br><span class="line">    <span class="comment"># 用新的前缀 SLAAC</span></span><br><span class="line">    radvd_conf = <span class="string">f&quot;&quot;&quot;# Configuration generated by <span class="subst">&#123;sys.argv[<span class="number">0</span>]&#125;</span></span></span><br><span class="line"><span class="string">interface lan-bridge &#123;&#123;</span></span><br><span class="line"><span class="string">    AdvSendAdvert on;</span></span><br><span class="line"><span class="string">    MinRtrAdvInterval 3;</span></span><br><span class="line"><span class="string">    MaxRtrAdvInterval 30;</span></span><br><span class="line"><span class="string">    prefix <span class="subst">&#123;prefix&#125;</span>/64 &#123;&#123;</span></span><br><span class="line"><span class="string">      AdvOnLink on;</span></span><br><span class="line"><span class="string">      AdvAutonomous on;</span></span><br><span class="line"><span class="string">      AdvRouterAddr on;</span></span><br><span class="line"><span class="string">    &#125;&#125;;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> obsolete_prefix <span class="keyword">in</span> obsolete_prefixes:</span><br><span class="line">        <span class="comment"># 弃用旧的前缀</span></span><br><span class="line">        radvd_conf += <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    prefix <span class="subst">&#123;obsolete_prefix&#125;</span> &#123;&#123;</span></span><br><span class="line"><span class="string">      AdvOnLink on;</span></span><br><span class="line"><span class="string">      AdvAutonomous on;</span></span><br><span class="line"><span class="string">      AdvRouterAddr on;</span></span><br><span class="line"><span class="string">      AdvPreferredLifetime 0;</span></span><br><span class="line"><span class="string">      AdvValidLifetime 120;</span></span><br><span class="line"><span class="string">    &#125;&#125;;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    radvd_conf += <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&#125;&#125;;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写 /etc/radvd.conf, 重启 radvd</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/etc/radvd.conf&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> conf:</span><br><span class="line">        conf.write(radvd_conf)</span><br><span class="line"></span><br><span class="line">    subprocess.check_output([<span class="string">&quot;service&quot;</span>, <span class="string">&quot;radvd&quot;</span>, <span class="string">&quot;restart&quot;</span>])</span><br></pre></td></tr></table></figure>    </div></div><p>总之现在 PPPoE 重新拨号之后下面能获取到新的 Prefix 并正确弃用旧的了. (不过还有不小改进空间)</p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>这一切的一切折腾完之后, 发现所有的流量全都从校园网走. 怎么回事呢? <code>ip r</code> 显示校园网的 <a href="https://unix.stackexchange.com/questions/708881/what-is-an-ip-route-metric-how-do-i-change-it">metric</a> 比宽带要低一点. 所以手动更改 metric 使得校园网更高. 这时候流量默认从宽带走了.</p><p>然后针对 <a href="https://thu.services/services/#ip_1">校内 IP</a>, 在校园网获得 IPv4 地址的时候增加路由即可.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> subnet <span class="keyword">in</span> [<span class="string">&quot;166.111.0.0/16&quot;</span>, <span class="string">&quot;101.5.0.0/16&quot;</span>, <span class="string">&quot;101.6.0.0/16&quot;</span>, <span class="string">&quot;59.66.0.0/16&quot;</span>, <span class="string">&quot;183.172.0.0/16&quot;</span>, <span class="string">&quot;183.173.0.0/16&quot;</span>, <span class="string">&quot;118.229.0.0/20&quot;</span>]:</span><br><span class="line">    subprocess.run([<span class="string">&quot;ip&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="string">&quot;add&quot;</span>, subnet, <span class="string">&quot;via&quot;</span>, gateway, <span class="string">&quot;metric&quot;</span>, <span class="string">&quot;120&quot;</span>])</span><br></pre></td></tr></table></figure><p>至于 IPv6 嘛, 我觉得这就是个迷, 折腾了一下午的 DHCPv6 都没得地址, 还因为重新连接的次数过多被学校把 MAC 封了. 解决方案: 不要啦!</p><p><em>3 月 4 日更新</em>:</p><p>经过几天的测试, 校园网的 IPv6 在 Linux 下获取需要几个条件:</p><ul><li>首先在拿到 v4 之后 check 下 <a href="usereg.tsinghua.edu.cn">自服务</a>, 如果里面的 IPv6 是 <code>::</code>, 那么你可以用 dhclient 拿到动态 v6; 如果里面莫名其妙地分配了地址, 那么你可以尝试把那个静态地址输进去看看能不能用 (大概率不行, 因为此时不自动设置 RA, 你可能需要手动设置路由, 设置了也不一定能用)</li><li>不要开 Prefix Delegation - 学校不响应</li><li>不是所有的 DHCP 客户端都能 100% 成功</li></ul><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><p>IPv6 的防火墙懒得设置了 (虽然这不好). IPv4 就是常规的, 对校园网开放 22, 对宽带不开放, 只允许向外新建连接. 后续还有什么再说. UPnP 似乎不是很安全, 所以暂时先放一下, 不如手操.</p><h3 id="还是路由"><a href="#还是路由" class="headerlink" title="还是路由"></a>还是路由</h3><p>在几天之后, 我突发奇想要把 SSH 弄到高端口方便从外面访问. 不过我并没有直接改 SSH 配置, 而是写了一行 iptables 把 2222 重定向到 22 了. 结果你猜咋地? 连不上. 我当时隐约觉得还是路由出问题了, 但是没搞明白究竟是什么问题. 后来一想, 我从校外访问它, 它的回包从宽带走, 宽带来个 NAT, 这不就炸了 (公网原地址被改写了)? 抓包检查, 确实是这样. SYN 在 enp3s0, SYN+ACK 就从 ppp0 走了. 对于这种情况我们需要按照 <strong>原地址</strong> 更改路由策略, 用 <code>ip rules</code>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip rule add from source_ip table campus</span><br><span class="line">ip route add via gateway_ip table campus</span><br></pre></td></tr></table></figure><p>使得 Linux 自动将所有发送自校园网公网 IP 的流量从校园网发出去, 此时从校外访问就通了. (换句话说, 之前几天的公网 IP 就是个摆设喽? 不应该罢)</p><h3 id="稳定性问题"><a href="#稳定性问题" class="headerlink" title="稳定性问题"></a>稳定性问题</h3><p>在此状况下, 我发现了一些稳定性问题.</p><p>首先是 Network Manager 的 PPPoE 似乎不会自动更新 Delegated Prefix, 在一天左右之后网就断了, 需要重启. 然后是学校的见鬼 IPv6. 为了解决这个问题, 我放弃了 Network Manager 转而使用比较新的 dhcpcd, 其支持自动 Prefix Delegation (省下来一个脚本), 能正常获取所有的 v4 和 v6. 剩下的就是路由了, 使用 <a href="https://manpages.ubuntu.com/manpages/trusty/man8/dhcpcd-run-hooks.8.html"><code>dhcpcd-run-hooks</code></a> 可以挂载用户脚本. 需要注意的是:</p><ul><li><p>脚本的运行是直接扔进 shell 执行的, <code>#! /usr/bin/python3</code> 不起作用.</p></li><li><p>脚本的 <code>stdout</code> 和 <code>stderr</code> 都不知道重定向到哪里去了, 所以输出获取不到 (导致我一直以为这东西坏了)</p></li><li><p><code>dhcpcd</code> 的服务配置文件 <code>/etc/systemd/system/multi-user.target.wants/dhcpcd.service</code> 提到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ProtectSystem=strict</span><br><span class="line">ReadWritePaths=/var/lib/dhcpcd /run/dhcpcd /etc/wpa_supplicant /etc/dhcpcd.conf /etc/resolv.conf</span><br></pre></td></tr></table></figure><p>故输出的 log 文件必须在这几个目录 (或者改一下这个文件也行). 这样调整之后至少不会三个小时断一次网了, 稳定性有待继续考查.</p></li></ul><p><em>3 月 12 日 更新</em></p><h3 id="DDNS-tinc"><a href="#DDNS-tinc" class="headerlink" title="DDNS, tinc"></a>DDNS, tinc</h3><p>通过 <a href="https://github.com/sanjusss/aliyun-ddns">一个 Docker 脚本</a> 实现了自动的阿里云域名的 DDNS, 然后配置了 tinc 以在任何地方访问 (并拿到能用的公网 IP 地址和宿舍台式机的 WOL).</p><h3 id="又是路由"><a href="#又是路由" class="headerlink" title="又是路由"></a>又是路由</h3><p>在配置的时候发现 IPv6 从校内 ping 不通, 经过检查, 和之前的问题相似, 这次是因为 <code>2402:f000::/32</code> 被默认从校园网路由并进行了 NAT6. 解决方案也相似, 强制源地址为宽带 <code>2409::</code> 的流量从宽带走.</p><p>但是校内 ping Prefix Delegation 的 IPv6 也不通… 原因同上, 但由于 PD 出来的地址是 GUA, 本身就需要选择路由, 不能一道切, 所以需要考虑通过 conntrack 路由.</p><p> <em>3 月 17 日更新</em></p><p>又到了一周周末. 本周用网还是很顺利的, 周末我收拾了一下上面提到的 IPv6 路由问题, 顺面更改了一下 DDNS 的策略.</p><p>首先是 IPv6 的路由, 我们对所有从 ppp0 进来的新连接检查原地址, 如果是学校的就对 <strong>连接</strong> 打上标记 <em>(而不是数据包!)</em>. 然后我们检查所有从内网发过来的包, 如果对应的连接被打上了标记, 我们就把这些 <strong>数据包</strong> 打上标记. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-A PREROUTING -i ppp0 -s 2402:f000::/32 -m conntrack --ctstate NEW -j CONNMARK --set-xmark 0x2402</span><br><span class="line">-A PREROUTING -i lan-bridge -d 2402:f000::/32 -j CONNMARK --restore-mark</span><br></pre></td></tr></table></figure><p>然后在路由的时候, 我们检查数据包上的标记, 如果有, 我们就从 ppp0 出去.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip -6 rule add fwmark 0x2402 table 9</span><br><span class="line">ip -6 route add default dev ppp0 table 9</span><br></pre></td></tr></table></figure><p>这样 IPv6 就完全通啦~ 然后我研究了一下 ppp0 上的 IPv6 地址, 发现既然我们已经有 Prefix Delegation 了, 没必要弄一个没啥用的地址. 因此我在 <code>dhcpcd.conf</code> 里面关闭了 ppp0 上的 SLAAC, 同时将 DNS 解析到了内网网关上. 鉴于现在 IPv6 能通过 DNS 查到, 顺面配置一下防火墙就很自然了.</p><p>这之后我尝试通过域名访问 SSH, 结果在内网挂了… 似乎是因为它把这玩意给 forward 给学校了… 看来 IPv4 这边也还是用 conntrack 比较好.</p><link rel="stylesheet" href="/css/folder.css" type="text/css"><script src="/js/folder.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>在 HarmonyOS 上装 Google (资料汇总)</title>
      <link href="/2024/01/28/GoogleOnHarmonyOS/"/>
      <url>/2024/01/28/GoogleOnHarmonyOS/</url>
      
        <content type="html"><![CDATA[<p>这两天拿到了一部 HarmonyOS 4 的华为手机. 由于华为被禁止搭载 Google 服务, 所以安装 Google 的过程不算顺利, 装上去之后还提示 “Google Play Protect 未认证”. 由于我的手机作为 Google 2FA 设备, 所以这个未认证的问题必须得到处理. 以下记录了安装 Google Play 系列服务的过程和参考资料.</p><span id="more"></span><p>首先要说明的是, <strong>GSpace</strong> 这种方法我不能接受. (没有为什么)</p><h3 id="为了-GMS-你需要越过长城-走向世界"><a href="#为了-GMS-你需要越过长城-走向世界" class="headerlink" title="为了 GMS, 你需要越过长城, 走向世界"></a>为了 GMS, 你需要越过长城, 走向世界</h3><p>我采用的方法是直接在电脑上开局域网代理, 然后手机设置 <strong>WLAN Proxy</strong>. 原因: 这样最省事.</p><h3 id="登录-Google-账号-安装-GSF-Google-Play-Store"><a href="#登录-Google-账号-安装-GSF-Google-Play-Store" class="headerlink" title="登录 Google 账号, 安装 GSF, Google Play Store"></a>登录 Google 账号, 安装 GSF, Google Play Store</h3><p>网上有一个叫 <a href="https://bishua666.com/huagu2/#/">华谷套件</a> 的工具, 利用 ta 可以半自动地登录账号并到达疯狂弹出 Play Protect 认证失败界面的程度.</p><p>为了防止这玩意没了, 在此贴几个链接和表格:</p><ol><li>清除谷歌应用数据 (理论上, 没有)</li><li>修改系统时间到 2020 年 7 月 10 日 (这个时候 Google 还没有禁止华为登录)</li><li>打开备份, 从内部存储恢复 (套件里面提供了一个谷歌服务助手的备份镜像用于还原, 以绕过不允许安装的问题)</li><li>激活谷歌服务助手 (只需要激活, 反正装不上去)</li><li>还原系统时间</li><li>安装 MicroG, 登录账号 (这时候账号出现了)</li><li>安装多个谷歌应用 (可能是用于绕过新安装检测?), 这里安装了 GSF (和 Store 好像)</li><li>卸载 MicroG</li><li>安装 Google Play Service</li></ol><h3 id="解决未认证问题"><a href="#解决未认证问题" class="headerlink" title="解决未认证问题"></a>解决未认证问题</h3><p>主要参考 <a href="https://zhuanlan.zhihu.com/p/421243092">知乎的文章</a>, 如果寄了参考 <a href="/2024/01/28/GoogleOnHarmonyOS/zhihu_download.html">本地拷贝</a></p><p>感觉大部分的方法都是暂时性的. 里面提到两种解决方案, 一种是通过重置手机的 GMS 服务, 让它 <em>认为</em> 你是可用的设备; 另一种是去 <a href="https://www.google.com/android/uncertified/">官网</a> 单独注册你这一个手机, 作为 “自定义 ROM 用户”.</p><p>反正现在暂时没出事, 后续如果出事再说. 里面提到可以通过禁用 GMS 联网来防止自动更新, 但是由于 2FA 需要联网, 所以无法实现. 理论上可以通过特殊的设置实现, 但是可能需要 Root 权限.</p><p><em>(一天后)</em>: 于是乎不到一天就出事了, 还是经典的未认证问题. 我把 GSF ID 单独认证了也没啥用. 目前的状况是把 GSF 的通知权限关了, 免得弹通知; 然后把 GSF 的联网权限关了, 免得自动更新和莫名其妙再未认证. Google Play 在手机重启并清除数据之后能打开更新软件, 但开着放个大半天就未认证了. 由于为题发生的频率过高, 我懒得折腾了.</p><p>Poe 等依赖于 Google Play 的软件依然无法使用 (怎么和没装 GMS 一样). 但至少还能更新软件 (虽然有点麻烦).</p><h3 id="禁用更新"><a href="#禁用更新" class="headerlink" title="禁用更新"></a>禁用更新</h3><p>为了防止夜长梦多 (比如 HarmonyOS Next), 我用 adb 把更新和一些玩意给禁用了. 考虑参考 <a href="https://www.bilibili.com/read/cv21078097/">B 站的专栏</a>, 或者直接搜索包名, 或者下一个 ES File Explorer 看一下.</p><link rel="stylesheet" href="/css/folder.css" type="text/css"><script src="/js/folder.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Two Examples Tackling UsrMerge</title>
      <link href="/2024/01/20/TacklingUsrmerge/"/>
      <url>/2024/01/20/TacklingUsrmerge/</url>
      
        <content type="html"><![CDATA[<p>Several days ago I encountered two separate usrmerge issues on different OSes. One upgrading from Debian 9 to Debian 12; the other upgrading from Ubuntu 20.04 LTS to Ubuntu 22.04 LTS. I solved them both, and here’s what I did.</p><span id="more"></span><h2 id="Cannot-close-fd-bug-due-to-staticly-linked-bin-cp"><a href="#Cannot-close-fd-bug-due-to-staticly-linked-bin-cp" class="headerlink" title="Cannot close fd bug due to staticly-linked &#x2F;bin&#x2F;cp"></a>Cannot close fd bug due to staticly-linked &#x2F;bin&#x2F;cp</h2><p>That very Debian 9 has a statically-linked cp command, and the following sub-procedure failed, as <code>ldd /bin/cp</code> should return an error. I’ve submitted <a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1061178">a bug report</a> to usrmerge package about this bug. If <code>/bin/cp</code> is statically linked, this check may be bypassed.</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">early_conversion_files</span> </span>&#123;</span><br><span class="line">    <span class="keyword">open</span>(<span class="keyword">my</span> $fh, <span class="string">&#x27;-|&#x27;</span>, <span class="string">&#x27;ldd /bin/cp&#x27;</span>);</span><br><span class="line">    <span class="keyword">my</span> @ldd = &lt;$fh&gt;;</span><br><span class="line">    <span class="keyword">close</span> $fh;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><strong>Update</strong>: The problem seems to be quite specific. <code>/bin/cp</code> is dynamically linked in Debian 10-12, and the script didn’t report an error when <code>/bin/cp</code> is statically linked. It could be Debian 9 using a too low version of ldd that behaves differently.</p><hr><h2 id="Both-lib64-ld-linux-x86-64-so-2-and-usr-lib64-ld-linux-x86-64-so-2-exist-bug"><a href="#Both-lib64-ld-linux-x86-64-so-2-and-usr-lib64-ld-linux-x86-64-so-2-exist-bug" class="headerlink" title="Both /lib64/ld-linux-x86-64.so.2 and /usr/lib64/ld-linux-x86-64.so.2 exist bug"></a>Both <code>/lib64/ld-linux-x86-64.so.2</code> and <code>/usr/lib64/ld-linux-x86-64.so.2</code> exist bug</h2><p>There’re reports of this bug. If you <em>have</em> renamed <em>any</em> of the two files, your Linux cannot run any dynamically linked program. Including <code>ln</code>, <code>mv</code> and <code>cp</code>. But there <em>is</em> some way back.</p><ul><li>If you have a USB stick with Linux installer image, just use it and make <code>/lib64/ld-linux-x86-64.so.2</code> a <strong>symbolic</strong> link of <code>/usr/lib64/ld-linux-x86-64.so.2</code>. Hard link will not solve the issue.</li><li>If, unfortunate like me, I do not have physical access to the server at the time, but fortunately I’m <strong>in a root shell</strong>, you can use <strong><code>busybox</code></strong> or other <strong>statically-linked</strong> binary to move that shared library back, or create a symbolic link. On Ubuntu 22.04 LTS, busybox is statically linked. (However, on Debian, it is dynamically linked so other approaches may be taken.)</li></ul><p>After making a symbolic link, reinstall usrmerge and the bug should be worked around.</p><link rel="stylesheet" href="/css/folder.css" type="text/css"><script src="/js/folder.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Upgrading Gitlab and Configuring OAuth2 Generic</title>
      <link href="/2024/01/20/UpgradingGitlab/"/>
      <url>/2024/01/20/UpgradingGitlab/</url>
      
        <content type="html"><![CDATA[<p>前几天我把科协的 Git9 从自编译的 11.1.1 一路升级到 16.8.0, 中途遇到了一些问题, 找了不少资料也解决不了, 因此放在这里.</p><p>Days ago, I upgraded Gitlab CE of SAST from 11.1.1 along the <a href="https://gitlab-com.gitlab.io/support/toolbox/upgrade-path/">Upgrade Pathway</a> to version 16.8.0, the latest version. I encountered some problems, which I cannot solve even after searching New Bing, Google and the official docs. Finally I got it working by debugging our OAuth server <em>and</em> the oauth2-generic gem. I’ll list my findings here.</p><span id="more"></span><p>A few years ago, my seniors wrote a custom gem to complete the OAuth steps with Accounts9, our OAuth identity provider. Due to this, they had to use a self-compiled version of Gitlab. Upgrading that version of Gitlab requires manual upgrades to Ruby, Postgresql, and so on, thus making the instance unmaintainable.</p><p>To upgrade it to the latest version, I thought of one way much simpler: I <strong>made a full backup</strong>, set up a virtual machine with Ubuntu 22.04 LTS and <strong>installed Gitlab 11.1.1 (exactly the same version!)</strong> there. After <strong>restoring the backup</strong>, I am able to upgrade it to 16.8.0, step by step.</p><p>Now that I have a usable Gitlab instance, it’s time to migrate the OAuth authorization method.</p><p>Using Omnibus Gitlab, there isn’t a way to install a custom OAuth method. However, I do find two possible ways:</p><h3 id="Patching-gem-directly"><a href="#Patching-gem-directly" class="headerlink" title="Patching gem directly"></a>Patching gem directly</h3><p>OAuth gems are located at <code>/opt/gitlab/embedded/lib/ruby/gems/3.1.0/gems/omniauth-*</code>. You can choose one (preferably, <code>omniauth-oauth2-generic</code>) and replace it with your own gem.</p><p>However I really <strong>DO NOT THINK THIS WAY IS RECOMMENDED</strong>.</p><h3 id="Using-omniauth-oauth2-generic"><a href="#Using-omniauth-oauth2-generic" class="headerlink" title="Using omniauth-oauth2-generic"></a>Using <code>omniauth-oauth2-generic</code></h3><p><a href="https://github.com/omniauth/omniauth-oauth2-generic">omniauth-oauth2-generic</a> is a generic OAuth2 strategy provider, but its <em>feature</em> is pretty unclear.</p><p>By default (starting from <em>approximately</em> Gitlab 15.4.6), omniauth-oauth2-generic passes <code>client_id</code> and <code>client_secret</code> <strong>in <code>Authorizaiton</code> header.</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Authorization</span><span class="punctuation">: </span>Basic base64_encode(client_id:client_secret)</span><br></pre></td></tr></table></figure><p>And passes <code>auth_token</code> <strong>in <code>Authorization</code> header</strong>:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Authorization</span><span class="punctuation">: </span>Bearer auth_token</span><br></pre></td></tr></table></figure><hr><p>So, if you encounter the following error or something like that, remember to check if your OAuth provider supports passing client_id and client_secret via basic auth:</p><blockquote><p>snakyhash::stringkeyed error&#x3D;’no client secret’</p></blockquote><p>To solve this, check <a href="https://gitlab.com/oauth-xx/oauth2/-/blob/main/lib/oauth2/client.rb?ref_type=heads">client.rb</a> of <a href="https://gitlab.com/oauth-xx/oauth2/">oauth2</a> and its <a href="https://gitlab.com/oauth-xx/oauth2/-/blob/main/CHANGELOG.md#L113">changelog</a>. In short, add conf:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth_scheme = <span class="string">&quot;request_body&quot;</span></span><br></pre></td></tr></table></figure><p>Alternatively, if modifying your OAuth provider is more of convenience (just like what I did, ) add a line to decode client_id and client_secret from basic auth.</p><hr><p>And a most confusing step: If your OAuth provider do not support passing auth_token by bearer, Gitlab <strong>WILL NOT WARN YOU</strong> about the auth failure. Instead, it just shows a 422 page, saying <em>“User e-mail cannot be blank”</em>.</p><p>To move it back to header, I traced to <a href="https://gitlab.com/oauth-xx/oauth2/-/blob/main/lib/oauth2/access_token.rb#L86">access_token.rb</a> and there is a setting to move it to body or query, but I didn’t test how exactly it works.</p><link rel="stylesheet" href="/css/folder.css" type="text/css"><script src="/js/folder.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Network on Ninetune - A Quick Guide</title>
      <link href="/2024/01/20/StudentFestivalNetwork/"/>
      <url>/2024/01/20/StudentFestivalNetwork/</url>
      
        <content type="html"><![CDATA[<p>之前的几届用的都是学长留下来的方案. 我接手这个事情之后看了看学长的方案, 感觉有一些美中不足之处. 因此, 我在十一假期闲的没事的时候重做了一版路由方案, 在学生节前重做了一版 WiFi 方案, 在 ChaGPT 之前更新了一版方案.</p><p>这篇文章将尝试 (啊对, 我也说不准大家能不能看懂) 阐明, Ninetune 的网络是如何运作的.</p><span id="more"></span><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>由于咱还没上网原, 所以这些知识大家不上网原也一定能看懂罢 (x</p><p>同样由于咱还没上网原, 很多东西讲的不一定对, 意思理解就行 (x</p><h3 id="NAT-Network-Address-Translation"><a href="#NAT-Network-Address-Translation" class="headerlink" title="NAT (Network Address Translation)"></a>NAT (Network Address Translation)</h3><p>IPv4 地址是不够用的, 连接校园网也只能获取到 1 个 v4 地址. 底下有那么多设备要访问网络, 怎么办呢? 只有借助 NAT 技术. 我们用到的主要是 SNAT (源地址转换), 在向外请求的时候把内网地址转换为公网地址 (或者说, 上一级的地址), 维护这个流的状态信息, 使得相应的回包能够被正确转发给请求的设备.</p><p>学校只给一个 &#x2F;128 的 IPv6 地址, 所以 v6 网也得 NAT.</p><h3 id="VLAN"><a href="#VLAN" class="headerlink" title="VLAN"></a>VLAN</h3><p>有时候一根网线上希望走多个互不干扰的数据. VLAN 把一根网线分成若干根虚拟的网线, 同一个 VLAN 相当于互相连接的一张网.</p><h2 id="网络架构"><a href="#网络架构" class="headerlink" title="网络架构"></a>网络架构</h2><p>现在你已经知道这些前置知识了, 来看看活动网络的架构吧!</p><p>![活动网络架构](&#x2F;2024&#x2F;01&#x2F;20&#x2F;StudentFestivalNetwork&#x2F;Activity Network.png)</p><p>活动网的架构其实很简单. 有一个 NUC 充当路由器, 两台交换机互相连接, 下面挂着 8 个 AP (就是发射无线信号的东西). 是不是简单易懂啊 (x</p><p>接下来魔法要开始啦~</p><p>作为活动网络, 自然有一些特殊的需求. </p><p>比如, 我们登录的账号是某位 <em>好心</em> 同学的账号. 如果有人在活动现场攻击学校的网, 导致被封号了怎么办? (bushi) 肯定有人要说, “除了你, 谁还干得出这种事情啊”, 但是既然我都能干出这种事情那肯定会有别人这样干对不对 (bushi). 因此, 我们可能需要针对学校网做一些防护.</p><p>再比如, 在 Ninetune 的前一个小时左右, 如果你打开 login.tsinghua.edu.cn, 就会看到上面写着登录的咱的校园网账号, 还有一个叫做 “断开连接” 的按钮. 你按一下, <strong>BOOM</strong>!!! 学生节的弹幕下线了, 直播中断了, 所有人都没网了… 这种事情还是要避免的对不对.</p><p>再比如, 如果有人用学生节的网下载原神, 占用了大量的资源, 会不会导致直播出现卡顿? 因此, 我们需要给直播保障至少 50Mibps 的带宽……</p><p>因此, 经过一分钟的综合考量, 我划分了以下 VLAN:</p><ul><li>VLAN 10, Management. 192.168.0.0&#x2F;24, 用于管理交换机和 AP</li><li>VLAN 2, User, 192.168.32.0&#x2F;21, 用于给用户上网</li><li>VLAN 3, Faculty, 192.168.64.0&#x2F;24, 用于承载弹幕, 直播等后台业务</li></ul><h2 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h2><p>整个网络的路由是在 NUC 上面的一台 Debian 虚拟机上进行的.</p><h3 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h3><p>作为路由器, 最基础的功能至少要能把数据包转发出去. Linux 的 <strong>默认行为</strong> 是会 <em>吃掉</em> 所有与它无关的数据包. 为了满足路由的需要, 就要把IPv4, IPv6 的转发统统打开. 这样路由器才有最基础的交换功能.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.ip_forward=1</span><br><span class="line">net.ipv6.conf.all.forwarding=1</span><br><span class="line">net.ipv6.conf.all.accept_source_route=1</span><br><span class="line">net.ipv6.conf.all.accept_redirects=1</span><br></pre></td></tr></table></figure><h3 id="网口"><a href="#网口" class="headerlink" title="网口"></a>网口</h3><p>然后就是网口的配置了. NUC 正好有两个物理接口, 一个接校园网一个接活动网刚刚好.</p><h4 id="上行"><a href="#上行" class="headerlink" title="上行"></a>上行</h4><p>首先看接校园网的网口吧. 校园网 (有线) 的 IPv4 和 v6 地址都是 DHCP 分配的, 网口上相当于一个 DHCP Client. IPv4 的接口配置相当简单, 一行就完事了:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iface eth0 inet dhcp</span><br></pre></td></tr></table></figure><p>IPv6 的就复杂一些. ICMPv6 规定了 Router Announcement 报文用于通知数据包如何转发. 但由于 IPv6 <em>转发是开启的</em>, 为了防止自己的 IPv6 路由被绑架, 必须显式设置 <code>accept_ra=2</code>, 使得 Linux 接受学校的路由器给的路由. 而且, 由于 DHCP Client 的一些 Bug, 如果 IPv6 的子网变化很大 (比如我宿舍的宽带是 <code>240e:</code> 打头, 校园网是 <code>2402:</code> 打头), 那么 DHCP Server 不会回复 NAK 信息 (而是直接丢弃), 此时 Client 只会继续发 Confirmation, 不发送 Discover 消息, 多次 Confirmation 失败之后就停了. 所以有时候需要手动强制重新获取 IPv6 地址. (感觉讲的不甚清楚).</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iface eth0 inet6 dhcp</span><br><span class="line">    accept_ra 2</span><br><span class="line"></span><br><span class="line">    # 下面两行用来解决 ifdown 的时候 ipv6 地址依然保留导致获取不到新地址的问题</span><br><span class="line">    post-up dhclient -6 eth0 -v</span><br><span class="line">    pre-down dhclient -6 -r eth0 -v</span><br></pre></td></tr></table></figure><h4 id="下行"><a href="#下行" class="headerlink" title="下行"></a>下行</h4><p>往下走就比较麻烦了. 首先是 VLAN 的问题. 要把一个接口拆分成多个 VLAN 虚拟接口. 比如下面一行定义了 eth1 上 VLAN 10 的接口:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto eth1.10</span><br></pre></td></tr></table></figure><p>然后是 IPv4 的地址设置, 使用静态 IP, 没有默认网关 (自己就是网关):</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iface eth1.10 inet static</span><br><span class="line">    address 192.168.0.1</span><br><span class="line">    netmask 255.255.255.0</span><br></pre></td></tr></table></figure><p>然后是 IPv6:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iface eth1.10 inet6 static</span><br><span class="line">    address fd30:5341:5354:0::1</span><br><span class="line">    netmask 64</span><br></pre></td></tr></table></figure><p>以此类推定义三个 VLAN 的接口, 这部分就算完成了.</p><h3 id="DHCPD"><a href="#DHCPD" class="headerlink" title="DHCPD"></a>DHCPD</h3><p>如果到此为止, 那么你的手机电脑连上 WiFi 是没办法获取 IP 的, 需要手动设置. 因此对于 v4 网, 我们需要配置 DHCP Daemon (Server) 来使得设备能够自动获取到 IP 地址. (就像我们获取家里 WiFi 的 IPv4 一样)</p><p>我使用的 Server 是 <code>isc-dhcp-server</code>. 先告诉 ta 要为哪些网卡进行监听:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INTERFACESv4=&quot;eth1.10 eth1.2 eth1.3&quot;</span><br></pre></td></tr></table></figure><p>然后依次告诉 ta 要怎么处理出现在这些网段上的请求, ta 会自动将每一个网段匹配到对应的网卡上:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">subnet 192.168.0.0 netmask 255.255.255.0 &#123;</span><br><span class="line">    # Address range that can be used as DHCP address</span><br><span class="line">    range 192.168.0.100 192.168.0.254;</span><br><span class="line">    # Broadcast address (can be calculated given subnet and netmask)</span><br><span class="line">    option broadcast-address 192.168.0.255;</span><br><span class="line">    # Default router</span><br><span class="line">    option routers 192.168.0.1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候, 你的设备就能正常获取 IPv4 内网地址, 在内网之间互相通信啦~</p><h3 id="RADVD"><a href="#RADVD" class="headerlink" title="RADVD"></a>RADVD</h3><p>你问我 IPv6 呢? 与 v4 不一样, IPv6 支持另一种地址分配方式 – SLAAC, 并且路由是由 RA 决定的. 手机仅支持 SLAAC (不支持 DHCPv6), 所以 SLAAC 是唯一可行的方式.</p><p>SLAAC 具体怎么回事自己查, 大致就是给一个 <strong>&#x2F;64</strong> 的前缀, 由设备基于自己的 MAC ADDR 决定一个地址, 然后向局域网通告.</p><p>对于每一个子网, 开启 RA, 设置通告的前缀, 并说明这个前缀上面的设备 都是局域网设备 (On Link), 可以使用 SLAAC 自行决定地址 (Autonomous), 以本机作为路由 (Router Address):</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface eth1.10</span><br><span class="line">&#123;</span><br><span class="line">    AdvSendAdvert on;</span><br><span class="line">    MinRtrAdvInterval 30;</span><br><span class="line">    MaxRtrAdvInterval 100;</span><br><span class="line">    prefix fd30:5341:5354:0000::/64</span><br><span class="line">    &#123;</span><br><span class="line">        AdvOnLink on;</span><br><span class="line">        AdvAutonomous on;</span><br><span class="line">        AdvRouterAddr on;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样一来, 设备就能获取到 IPv6 <strong>ULA</strong> 地址并能在局域网内通信啦~</p><h3 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h3><p>于是就有人问了, 搞了这么半天, 还访问不了公网? 还真是. 不过也快了.</p><p>思考: 当底下的设备 ping 114.114.114.114 的时候会怎样?</p><p>路由器转发给学校的路由器: <code>192.168.32.2 ping 114.114.114.114</code></p><p>学校的路由器一看, <code>192.168</code> 开头是什么玩意? 扔了扔了. 于是, 不通.</p><p>怎么办呢? 用 NAT, <code>166.111.x.x ping 114.114.114.114</code>. 知道啦, <code>114.114.114.114 reply 166.111.x.x</code>, 然后路由器再把目的地址换回去, <code>114.114.114.114 reply 192.168.32.2</code>, 这就终于通了. 要实现很简单:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -A POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="line">ip6tables -A POSTROUTING -o eth0 -j MASQUERADE</span><br></pre></td></tr></table></figure><p>这下终于能访问公网喽~</p><h3 id="安全配置"><a href="#安全配置" class="headerlink" title="安全配置"></a>安全配置</h3><p>你问, 这就完了嘛? 当然没有. 前面提到了很多安全有关的问题, 需要一一解决. 这些我就不展开了 (主要是很多规则现在还在虚拟机里面没有拿出来, 懒得自己手写一遍了)</p><ul><li>禁止 User 段成员互相访问, 禁止 User 段成员访问 Management 段, Faculty 段. 这是三层基础的权限控制.</li><li>禁止 Faculty 段成员访问 Management 段</li><li>禁止外面乱发 DHCP 应答, 仅允许 Router 发 DHCP 应答</li><li>禁止外面乱发 RA</li><li>禁止外面乱发 ARP</li><li>二层隔离</li><li>禁止 User 段成员访问 login.tsinghua.edu.cn, auth4, auth6</li><li>SSH 端口不对 User 和 Faculty 开放</li><li>STP 防环</li><li>单端口防环</li><li>……</li></ul><p>正是这些高级安全策略使得网络不会因为一颗老鼠屎全面崩溃, 造成混乱.</p><h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><p>这还不够. 为了保障直播等工作正常进行, 我还写了一点流量控制策略, 参考 <a href="https://arthurchiao.art/blog/lartc-qdisc-zh/">大佬的译作</a></p><ul><li>保证 50Mibps 带宽给 Faculty 使用</li><li>保证 10Mibps 带宽给 Management 使用</li><li>剩下的带宽公平地分配给每一个连接</li></ul><h3 id="VPN-配置"><a href="#VPN-配置" class="headerlink" title="VPN 配置"></a>VPN 配置</h3><p>为了方便管理, 我给路由器配置了一个点对点的 VPN (啊对, 真的是 VPN 不是那个).</p><h2 id="无线配置"><a href="#无线配置" class="headerlink" title="无线配置"></a>无线配置</h2><p>说了这么多, 你发现了什么? WiFi 信号还没发出来呢……</p><p>AP 的布置也是有讲究的. 首先要了解单个 AP 的信号强度情况 (这两张图片好大!):</p><p><img src="/2024/01/20/StudentFestivalNetwork/2F%20Single%20AP.png" alt="2 楼单个 AP"></p><p><img src="/2024/01/20/StudentFestivalNetwork/1F%20Single%20AP.png" alt="1 楼单个 AP"></p><p>可以看到 AP 的覆盖范围还是很大的, 信号也不错. 因此, 我们不妨给出这样的布局:</p><p><img src="/2024/01/20/StudentFestivalNetwork/1F%20APs.png" alt="1F AP"></p><p>由于本人很懒, AP 的信道和功率直接丢给自动调整, 最后效果也还不错.</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>至此, 一位没有学过网原的大二同学配置好了学生节的网. 学生节上用户数大概 150 左右, 流量从未达到需要 tc 介入的水平. 这套改进的方案相较于旧方案改进了网络结构, 取消了单个设备的速率上限, 最大化利用了网络. 也希望这篇文章连通咱在飞书里面的文档能使得这套系统易于维护, 不断更新.</p><link rel="stylesheet" href="/css/folder.css" type="text/css"><script src="/js/folder.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello world! &amp; Summary of Autumn Semester 2023</title>
      <link href="/2024/01/19/MyFirstPost/"/>
      <url>/2024/01/19/MyFirstPost/</url>
      
        <content type="html"><![CDATA[<p>在学长各种鼓励 (雾) 下, 我来尝试写 Blog 了. 最近总算是考完了试, 这几天我好好研究了一下科协的服务器设备, 感觉还是有不少东西可以写.</p><p>正好学校要我们写学期总结, 我就来拿 Blog 试试水吧 (x</p><span id="more"></span><hr><h2 id="工作总结"><a href="#工作总结" class="headerlink" title="工作总结"></a>工作总结</h2><p>不妨先来总结一下这学期的各种工作: (这里肯定会很乱)</p><h3 id="科协"><a href="#科协" class="headerlink" title="科协"></a>科协</h3><p>上学期我转系来到计算机系之后当即就加入了计算机系科协. 学期开始时有一个投票问大家想干嘛. 我填了 DB9 和 学生节. 由于我闲得慌, (主要是卷不动,) 我在科协干了不少事情. 总体来讲, 疫情的几年严重影响了大家的想法, 现在绝大多数人要么在 <em>“卷”</em>, 要么在 <em>“摆”</em> . <em>“卷”</em> 的人一天到晚都在干一些我没有办法理解的事情, 比如对着那些没有什么记忆价值的东西猛背 <del>(比如大物)</del>, 再就是各种科研, 进组, 绩点…… <em>“摆”</em> 的人一直在打游戏赶 DDL, <del>学习没啥意思干嘛不退学</del>.</p><p>不得不说, 疫情几年大家闷在家里, 像咱这样待不住总想整点花活的人越来越少了.</p><h4 id="学生节网络"><a href="#学生节网络" class="headerlink" title="学生节网络"></a>学生节网络</h4><p>这件事贯彻了前半学期. 我单独拉一篇 Blog 出来再整理一下罢. 总算在学生节的时候, 新的改进的网络没有出问题, 非常坚挺, 和大礼堂老师的合作也很愉快. 后来还参加了茶园的学生节, 也没有锅. 不得不说, 咱对这件事还是挺骄傲的 (毕竟目前看来除了咱没人能看懂这些东西了)</p><h4 id="整理-308"><a href="#整理-308" class="headerlink" title="整理 308"></a>整理 308</h4><p>第二件主要的事情是把 308 好好收拾了一下, 把该扔的都扔掉了, 让 308 干净了一些. (虽然 308 每天都有人拿他当食堂, 咱也没办法)</p><h4 id="维护科协的旧服务"><a href="#维护科协的旧服务" class="headerlink" title="维护科协的旧服务"></a>维护科协的旧服务</h4><p>科协的服务绝大多数都相当陈旧了, 都是老学长的圣遗物 (x). 疫情的几年这些服务也没有进行妥善的维护, 导致状况相当差. 这件事基本上是在考试周完成的 <del>(问就是懒得复习)</del>, 正好考试周没人用这些东西, 在生产环境折腾也不会出事. 包括:</p><ul><li>Git9, 这个写一小篇罢了</li><li>Rug 和 Zeus 更新系统</li><li>Accounts9 DB 错误</li><li>FTP9 迁移, Server4 重建</li><li>Hera 清理虚拟机</li><li>修 Card9 (重新焊接断线)</li></ul><h3 id="TI-杯"><a href="#TI-杯" class="headerlink" title="TI 杯"></a>TI 杯</h3><p>暑假的时候受了电机系科协学长的蛊惑去给 TI 杯当测试人员, <del>(也不给工钱 (bushi))</del>. 期间也解决了一些技术问题, 不过似乎也没什么值得拿出来写的. 都是基础的单片机开发工作.</p><h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><p>啊, 学习. 尽人事, 听天命, <del>等老师捞</del> (((</p><p>也没什么特别需要在总结里面说的, 直接扔到分析里面得了</p><hr><h2 id="学业"><a href="#学业" class="headerlink" title="学业"></a>学业</h2><p>下面倒是一些我觉得 <del>有些搞头</del> 有待改进的地方, 兴许可以作为 Project 练练手?</p><h3 id="DSA"><a href="#DSA" class="headerlink" title="DSA"></a>DSA</h3><p>DSA 的在线代码展示用的还是 Java8 的 ActiveX 控件, 这东西简直是老掉牙了. 有想拿 React 给它干了重新写一个的冲动. 不过感觉写起来应该还挺麻烦的 (主要是比较琐碎), 所以也就想想吧.</p><p>上课讲的东西倒还不算难, yx 讲的挺好 (就是要记的东西实在是有点多, 记不得一点), 作业和洛谷有异曲同工之妙, 写起来部分题有点费劲 (DSA 真的是要 <strong>审慎地分析问题并找到适合该问题的恰当的数据结构</strong>), 这是 DSA 的精髓. 感觉看着提示去做题就变成了纯体力劳动实现代码 debug, 没有这个思考的过程总觉得缺了点什么.</p><p>DSA 的考试经典和上课没有什么关系, 硬在背讲义, 还有很多精确到 1 的人脑模拟算法题, 评价为, 不如不考. 算法考查的是思维不是背讲义的算法实现啊.</p><h3 id="ICS"><a href="#ICS" class="headerlink" title="ICS"></a>ICS</h3><p>ICS 是一个我已经学了几遍的课 (B站大学yyds). 这一遍学下来我最大的感受是: 为啥 ICS 不直接讲 RISC-V 啊啊啊啊啊… <strong>X86-64 一大坨!</strong></p><p>平常的作业很常规, 考试比较难, 主要是每一题都不简单, 题量也不小. ICS 命题的时候很多问题都没有考虑到, 导致那些题目都很 <em>“理想”</em>, 实际操作上是有问题的.</p><p>ICS 今年有 3 个 Lab.</p><ul><li>BombLab, CSAPP 经典, 主要考查读汇编代码和动态调试的能力. 很多时候直接 Fuzz 就能很快完成, 但是真要看懂这个题在干什么很需要一些时间.</li><li>CoroutineLab, 我们自己出的, 框架代码看得我血压高. 某一个周末我闲得无聊直接手写了一遍框架. 后来把这个框架传到 Github 上面去的时候发现了一些 Bug, 又简单改了一下. 这个框架在咱的 <a href="https://github.com/84634E1A607A/coroutine-lab">Github</a> 上面.</li><li>MallocLab, CSAPP 经典, 我简单写了下, 然后就发现后面全在拟合测试点, 我就懒得写了. 我觉得这没有意义. 这个分数不要也罢.</li></ul><p>总体上讲, 这节课讲的内容是 Linux 和 X86-64 汇编. (你都讲 X86-64 不讲讲我们亲爱的一大坨的 Windows ABI?) 我觉得应该提一嘴 Windows ABI 的问题, 省的总有同学在 Windows 底下写汇编然后跑不起来.</p><h3 id="FoP"><a href="#FoP" class="headerlink" title="FoP"></a>FoP</h3><p>想不到吧我这学期既上 DSA 又上 FoP… 平常的课基本没上, 大作业和 <a href="https://github.com/UbeCc">浩然哥哥</a> 一起写了个非常正经的 <a href="https://github.com/UbeCc/SnakeFoP">贪吃蛇</a>. 期末考试我忙着找 Harry 学长看 Server Rug, 考了两个小时就跑了, 届时第四题的测试点都没有更正过来还是个错的. 不过我无所谓啦, 反正有 95 分了, 不差那两个点.</p><h3 id="物理实验B-1"><a href="#物理实验B-1" class="headerlink" title="物理实验B (1)"></a>物理实验B (1)</h3><p>这节课算是个 “任选”? 但是我还是选了. 物理是从实验中走过来的, 我觉得物理实验这种课还是很有必要.</p><p><strong>但是</strong>: 第一节实验课我去早了一个小时 (我没看到公告里面说 6:30 开始, 我 5:10 就去了). 遇到了一个老教授. 他向我们抛出了一个问题:</p><blockquote><p> 在分光镜实验里面, 我们看到的光谱实际上呈现一个弧度, 不是一条直线. 这是为什么?</p></blockquote><p>是课本上讲的直线的光谱错了吗? 还是某些现象造成了这样的结果? 老师说: <strong>“你们做实验的时候就记着写报告, 谁去探究这些问题?”</strong> 是啊, 我做这个实验的时候也光顾着测数据写报告, 谁去探究这些问题呢? 但是真正检验你学明白了没有, 会应用了没有, 能分析了没有的不正是这些问题吗?</p><p>我们做物理实验, 上这个课, 究竟是为了什么? 从课程内容来看, 这就是机械地折腾实验设备, 记录数据, 然后写一份无聊的报告. <em>你学到了什么? 你锻炼了什么能力? 这节课有什么用?</em></p><p><em>我学到了什么?</em></p><p>实验总是会出岔子的. 出了岔子能不能<strong>快速分析问题, 提出解决方案并进行验证</strong>, 这是能力. 这种能力是跨学科的, 跨场景的, 跨时空的. 在科协和各种应用的场景下, 也急需这种能力.</p><p>打个比方吧, 在测量空气的相对压力系数那个实验中, 助教提前说过仪器在水烧开的时候可能漏气导致示数跳动, 无法稳定. 我在加热到沸腾的时候示数确实出现了跳动不稳定的现象. 助教觉得这可能就是仪器漏气了. 但是我把电加热关小之后, 仪器示数回到了正常的读数. 这说明 <em>仪器没有漏气</em>. 那么原因是什么呢? 是因为沸腾的时候水里面有大量的气泡, 这些气泡在里面的温度不能保证是水的沸点, 因此影响了空气泡的内部温度. 把火开小使得水沸腾但不剧烈沸腾, 此时的结果就更加准确了.</p><h3 id="离散-1"><a href="#离散-1" class="headerlink" title="离散 (1)"></a>离散 (1)</h3><p>不好评价, 东西很多, 公式很多, 考得很难, 背不下来.</p><h3 id="自动机"><a href="#自动机" class="headerlink" title="自动机"></a>自动机</h3><p>这节课讲的东西说实话也挺无聊, 但是设计题我觉得还是很有意思的. 不过闭卷考试, 那些符号咱一个都记不住 (((</p><p>似乎也没什么好多说的.</p><h3 id="大雾-2"><a href="#大雾-2" class="headerlink" title="大雾 (2)"></a>大雾 (2)</h3><p>被电机系的大物制裁了, 这学期的大物时间和课序号是定死的, 在预选阶段没办法退课. 老师讲的似乎默认我们做了充分的预习 (不如说, 我没有做充分的预习), 很多公式的推导看着一脸懵. 上半学期是电磁学, 公式和新概念一大堆, 考试的时候哪里要乘 $2\pi$ 啥的一点都记不得. 下半学期的光学和量子物理讲的很难, 考试纯纯考背公式.</p><p>所以既然考试背完了公式就能写卷子, 我上课干嘛?</p><h3 id="马原"><a href="#马原" class="headerlink" title="马原"></a>马原</h3><p>马原这节课很有意思, 不过感觉这个老师讲马克思的求学, 家庭啥的讲的太多了, 后面真正在逻辑上有意义, 耐人寻味的资本等内容相对讲得比较浅. (听说给分不错? 不过我有微积分, 我无所谓)</p><hr><h2 id="TI-杯-1"><a href="#TI-杯-1" class="headerlink" title="TI 杯"></a>TI 杯</h2><p>今年的 TI 杯搞什么用小车连电线杆. 通过这个 TI 杯我深刻认识到电机系的同学们的代码素养真是一大坨; 组织能力也是一大坨. 不过说来, 哪里又不是这样呢? (好像在计算机系大家就都能组织起什么事情似的)</p><p>经过多次研究, 我发现自己写项目文档真是个麻烦事 – 大家总觉得自己讲清楚了, 但是听的人却是一点也听不懂. TI 杯的赛事文档就是这个样子 (FoP 的大作业文档也就稍微好一点).</p><p>TI 的比赛规则被我改得比较阴间, 加入了一些不好写算法的部分. 这样一来, 我本来 <em>以为</em> TI 会演化成算法竞赛, 结果发现大家基本上都调试不明白自己的小车. (这有什么难的?)</p><hr><h2 id="其它我想谈一谈的问题"><a href="#其它我想谈一谈的问题" class="headerlink" title="其它我想谈一谈的问题"></a>其它我想谈一谈的问题</h2><h3 id="计组查重的事情"><a href="#计组查重的事情" class="headerlink" title="计组查重的事情"></a>计组查重的事情</h3><p>之前似乎不少人计组被查重了. 本来自己写代码应该是天经地义的事情, 现在抄网上的代码居然还要理直气壮去说, <em>“你任务量太大了, 是我想抄吗”</em>, 或者 <em>“我又不去造 CPU, 我造机干嘛”</em> 又或者 <em>“我能力不行就只能挂科吗”</em>.</p><p>我就想问问, 上课听讲了嘛? 书认真看了嘛? 这门课认真学了吗? 又不认真学, 又想着抄代码, 活该挂科.</p><h3 id="软工课改的事情"><a href="#软工课改的事情" class="headerlink" title="软工课改的事情"></a>软工课改的事情</h3><p>下学期上软工, 改成 2-3 人一组了. 软工这门课最大的问题在于课程设计希望我们理解的东西和大作业, 或者说 <em>决定绩点的东西</em>, 没有什么关联. 软工本来是 “软件工程”, 侧重点在 <strong>工程</strong> 上, 可能由于这样没办法考查 (考试又变成背课本), 考查的方式是大作业. 然后这节课就变成 “软件” 了. 到头来, 大家都在 <em>应付 ( 卷 )</em> 大作业, 也没人去顾及工程的问题了. 听学长的意思, 也没什么人听课.</p><p>要想在 <em>软件</em> 里面考查 <em>工程</em>, 大作业的评分标准不能按照 <em>功能</em>, 要提高 <em>结构</em> 在其中的占比. API 定义合不合理, 权限验证是否完全, 传递信息是否简洁, 这些东西比界面更加重要. 具体改革的结果怎样, 明年见分晓.</p><h3 id="心理健康的事情"><a href="#心理健康的事情" class="headerlink" title="心理健康的事情"></a>心理健康的事情</h3><p>期末考完, 总结会上面又着重谈了谈心理健康的事情. 可能最近又出事比较多吧.</p><p>归根结底, 都是 <strong>“卷”</strong> 这个字的问题. 每天就想着绩点和学习, 能不出事吗? 看咱考试周玩弄科协的服务器, 高考前炸咱高中的校园网, 这才总算没被送进精神病院里去 (bushi) (x). 所以大家都需要一门像咱的微积分一样的课来实现绩点自由, 这样才能营造良好的学习氛围 (雾)</p><hr><h2 id="寒假和下学期"><a href="#寒假和下学期" class="headerlink" title="寒假和下学期"></a>寒假和下学期</h2><p>寒假里科协的服务有一些该拓展了, 老旧的服务很多也该维护了. 咱的 Thrive 更新之后咱也没时间看, 感觉寒假要干的事情还确实不少.</p><p>下学期同时要上 离散(2), 高代 和 概统 三门数学课, 祝我好运 (x</p><p>科协的事情就留给下一个 (和下下个) post 罢.</p><link rel="stylesheet" href="/css/folder.css" type="text/css"><script src="/js/folder.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>梦之网的总结</title>
      <link href="/2023/08/03/MZWSummary/"/>
      <url>/2023/08/03/MZWSummary/</url>
      
        <content type="html"><![CDATA[<p>这是董工对梦之网的总结. 由于董工的思维比较跳跃, 所以说这篇总结很想必会非常的混乱.</p><span id="more"></span><h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><p>我们不妨来首先谈一下梦之网的成果. 一个多星期的实践中, 我们:</p><ul><li>见识了新疆那边的风土人情</li><li>增进了支队队员之间的友谊和了解 (磕到了CP)</li><li>增进了对电力系统的理解 (虽然雨我无瓜)</li><li>为喀拉亚尕奇乡带去了一些新鲜血液并向他们的小学生们播撒了科学的种子</li><li>为乡中心小学搭建了一套 5kW 的光伏系统</li></ul><p>可以见到我把光伏系统实际上放到 <strong>最后</strong>.</p><p>很多人觉得, “梦之网” 这个东西不就是以光伏为主要内容吗? 但是我想说, 5kW,<br>就算是50kw的光伏, 实际上对于目前的电网来说也只是九牛一毛. 我认为我们的重点还是在向大家普及科学的种子.</p><h3 id="对新疆的新理解"><a href="#对新疆的新理解" class="headerlink" title="对新疆的新理解"></a>对新疆的新理解</h3><h4 id="关于治安"><a href="#关于治安" class="headerlink" title="关于治安"></a>关于治安</h4><p>我们普遍对新疆的状况有一些误解. 新疆在我的印象中没有什么印象 (x). 但是在老一辈的脑海中新疆是一个很乱的地方, 一个很破败的地方. 虽然说从去年脱贫攻坚算是结束了, 但是生活在城里的我们 (至少我) 对在脱贫攻坚的战线上去得的成果并不了解. 我们并不知道脱贫攻坚 <em>到底</em> 带来了什么. 但是通过这次的实践, 我见识到了, 为了实现共同富裕的目标, 我们每一个省对口援疆, 尽自己的一份力把新疆建设的很好.</p><p>从乌鲁木齐前往伊宁的火车上, 我们在开玩笑, 说会不会校长骑马来接我们 (x). 而实际上校长找了几位老师开他们的私家车来接我们, 与内地并无二致. 去学校的路是乡道 (也可能是县道?), 是两车道的水泥路. 尽管当地运煤炭的大车相当的多, 但是路面的质量还是比较好的. (这就不得不提一嘴部分司机在这种限速40的路上面飙100但是依然如履平地 (?) 的恐怖场面了)</p><p>目前新疆的治安也还是很不错的. 得益于当地的比较淳朴的民风以及基层党组织的恰当引导, 当地的社会氛围还是非常向好向善的. 晚上一个人在外面走的人不少; 我在去吃饭以及采购线缆 &#x2F; 工具的时候, 与店家的交流也是非常友善的. 我觉得这能够代表新时代新疆的建设工作取得的巨大成就.</p><h4 id="关于社区建设"><a href="#关于社区建设" class="headerlink" title="关于社区建设"></a>关于社区建设</h4><p>去的第一个周一, 我们在乡党群活动中心参加了他们的升旗仪式. 首先给我留下印象的是参加的人真不少, 看上去是一个有组织的活动. 在活动中他们的党委书记 (吧, 我不确定) 应该是调过来的, 不会说当地的语言; 所有的话都是由她先说一遍再由一位当地的老人转述的. 她的语气比较强硬, 可能也与当地人粗犷的文化相关吧, 但是考虑到语气强硬的这一段话主要是在批评当地返乡的大学生不来参加升旗仪式, 我觉得情有可原.</p><p>升旗仪式唱国歌的声音不大, 可能是因为普通话对他们中的很多人依然是陌生的存在.</p><p>升旗之后他们开展了对积极参与社区建设的村民的口头表扬与一定的物质奖励工作, ~~虽然我个人觉得有点老土 (小声) ~~ 但是不失为一种激励大家的好方法.</p><h4 id="一点题外话"><a href="#一点题外话" class="headerlink" title="一点题外话"></a>一点题外话</h4><p>在老人家说当地语言的时候, 我注意到 “大学生”, “网格员” 等较新的词汇都是由汉语直接音译的. 在信息化的时代, 人们每天都在制造新的词语. 很多人研究如何使用信息化手段保护少数民族的语言和文字; 但在较小的使用人群基数下, 少数民族的语言如何紧跟潮流并避免被过度稀释? 或者说, 如果少数民族语言和文字的语义停留在 100 年前, 那么这样的语言究竟能够坚持多久?</p><h3 id="对支队成员的了解"><a href="#对支队成员的了解" class="headerlink" title="对支队成员的了解"></a>对支队成员的了解</h3><p>我发现这方面我不好说, 也许我内心里对部分同学有一些评价, 但是这只能代表我自己的看法, 不应该在小作文里出现. 这篇总结应该对事不对人, 所以不如我们略过罢.</p><p>唯一的问题: 我们支队的部分同学间的奇怪氛围是电机系祖传的嘛… (x)</p><p><del>还有一个问题: 为什么我觉得我们班的各位都还挺正常的 (除了我以外) … (雾)</del></p><h3 id="对电力系统的理解"><a href="#对电力系统的理解" class="headerlink" title="对电力系统的理解"></a>对电力系统的理解</h3><p>董工之所以为董工, 就是因为他不那么停留在纸上, 而是常常向往到实地去看看试试.</p><p>董工在大一的一年里没有干什么与电机系有关的事情, 和网络 &#x2F; 前后端 &#x2F; 软件工程 &#x2F; 网络安全有关的事情倒是有一点. (作为一个能开盒雨阔糖的同学, 润到 GUI 系去应该没什么错罢)</p><p>为了探究光伏并网对电力系统可能产生的影响, 我大概了解了一点点的有关配电侧的变压器等等的知识. 我发现配电的变压器是为了降压设计的, 不适合走负功率 (不适合作为并网的变压器使用), 但具体的原因毕竟我没学过电机学我不知道. 因此, 负载侧的分布式光伏如果要并网需要向当地的电力局报备审批, 确认影响. 这样电网也才好给你发钱 (bushi</p><p>然后我们参观过风电的项目, 他们是个兆瓦级别的项目, 有 5 组风机, 每组 10s 发一度电. (想想我们一天也就20度电, 唉… 但确实是这种大型的项目要更加便于调度, 统一管理; 我们这种小型项目影响太小, 不管也罢)</p><h3 id="对同学们的激励"><a href="#对同学们的激励" class="headerlink" title="对同学们的激励"></a>对同学们的激励</h3><p>这是支教组的事, 我没参与, 我不好说. 但是怎么说也比建设组强罢 (悲</p><h3 id="对清华真实情况的澄清"><a href="#对清华真实情况的澄清" class="headerlink" title="对清华真实情况的澄清"></a>对清华真实情况的澄清</h3><p>令我十分震惊的是 “清华有 80% 以上的毕业生选择出国” 这种震惊我 19 年的假新闻居然拥有如此大量的受众. 在喀拉亚尕奇乡, 村民们得知我们是清华大学的学生之后的第一个问题出奇一致: <em>“你们是不是大多数人都出国了?”</em> <em><strong>(某音害人不浅!)</strong></em> 但是既然问到了, 我们正确传播清华的形象总还是好的. (就说这么多罢了)</p><h3 id="搭建了-5kW-的光伏电站并解决了部分电器安全问题"><a href="#搭建了-5kW-的光伏电站并解决了部分电器安全问题" class="headerlink" title="搭建了 5kW 的光伏电站并解决了部分电器安全问题"></a>搭建了 5kW 的光伏电站并解决了部分电器安全问题</h3><p>我最熟悉的部分就是这一块了. 作为建设组的 <del>幕后黑手</del> 工程师, 我参与了光伏系统的设计施工的全过程, 甚至为此在三年内头一次熬了通宵… 在工程中我尽量保证了电器方面的工程质量, 使用业界领先 (雾) 的技术确保光伏系统安全可靠地运行. 7 月 30 日光伏并网以来, 日均发电量在 21 度左右, <em>如果</em> 装上储能能够供学校一整天的用电 (但是可能需要 10 kWh 的储能 (悲)).</p><p>在对学校的电器线路例行检查的过程中, 我发现了包括零火反接, 地线不良, 剩余电流动作保护器烧毁, 浪涌保护器失效, 接线端子未压紧, 相线末端裸露等多个问题, 并用有限的知识尝试解决了其中的大多数, 同时将未能解决的部分告知给相关人员. 学校的用电安全问题得到了一定程度的解决.</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>这次实践活动暴露出了很多问题, 我希望问题的有关人员不要打我 (对事不对人, 没有任何恶意), 希望能为后续的实践活动提供一定的参考.</p><h3 id="沟通不畅-发现问题的时间较晚"><a href="#沟通不畅-发现问题的时间较晚" class="headerlink" title="沟通不畅, 发现问题的时间较晚"></a>沟通不畅, 发现问题的时间较晚</h3><p>一开始去之前与学校的联系不太多, 主要是队长联系的, 我的问题先问队长, 队长再问校长, 校长回复之后再回复给我, 加上2个小时的时差, 沟通的效率极低; 与厂家是由组长联系的, 问题反馈也比较慢. 我们从很早时候就打算确定光伏和储能的位置, 但是由于对学校布局的不了解, 位置的确定一直都是想当然, 忽略了很多因素. 包括但不限于:</p><p>光伏板:</p><ol><li>一开始打算装屋顶, 因为有人觉得屋顶是平的</li><li>后来有人打算装屋顶, 因为觉得教学楼是南北向的</li><li>后来打算装草地上, 因为错误估计了光照时间</li><li>后来决定装水泥地上, 此时发现要打孔, 这时候已经去了三天了</li></ol><p>储能和逆变:</p><ol><li>一开始逆变器打算放室内, 觉得室外不好</li><li>后来打算放办公室里, 觉得这样小朋友不会动, 但它们发热</li><li>后来打算挂外墙上, 结果外墙上有保温层, 无法固定 (此时建设组的同学们的内心是绝望的, 但是我一贯比较悲观所以反倒还好)</li><li>后来决定放光伏后面架着, 然后发现已有的钢梁的孔距对不上, 这时候已经不到 3 天了…</li></ol><p>如此种种, 反映出提前进行至少是详细的联网 <strong>实地考察的重要性</strong> (当然最好是能去个人考察一下).</p><p>还有, 我过去之后跟校长聊天, 结果校长说他之前一直以为我们是去监工, 我们去了才知道我们是施工… (怎么这都行啊啊啊啊啊啊)</p><h3 id="顺序不明-出现前置问题"><a href="#顺序不明-出现前置问题" class="headerlink" title="顺序不明, 出现前置问题"></a>顺序不明, 出现前置问题</h3><ul><li>联系厂家的时候说是装屋顶, 结果后来说装地上, 于是部分厂家联系失败</li><li>定做光伏支架的时候打算拌混凝土, 但是等支架做好了又变成了放水泥地上, 于是部分东西用不了</li><li>固定螺栓买好了才发现光伏板是压块固定</li></ul><p>希望要尽量早地确定 <strong>详细的</strong> 施工方案, 以免出岔子, 预算爆炸.</p><h3 id="经验不足-初生牛犊不怕虎-觉得很简单-有手就行"><a href="#经验不足-初生牛犊不怕虎-觉得很简单-有手就行" class="headerlink" title="经验不足, 初生牛犊不怕虎, 觉得很简单, 有手就行"></a>经验不足, 初生牛犊不怕虎, 觉得很简单, 有手就行</h3><p>在变更计划的时候, 我当时晓以利害, 结果发现部分同学认为光伏用的电缆和三相电缆还有单相电缆是通用的…</p><p>在此普及一下 (不一定对, 建议上网确认下):</p><table><thead><tr><th align="center">名称</th><th align="center">标准</th><th align="center">示例</th><th align="left">含义</th></tr></thead><tbody><tr><td align="center">BV线</td><td align="center">GB&#x2F;T 5023.3-2008</td><td align="center">BV4 红线</td><td align="left">铜芯截面积4平方毫米的红线</td></tr><tr><td align="center">光伏线</td><td align="center">2 Pfg 1169&#x2F;08.2007</td><td align="center">PV1-F 1x4 黑</td><td align="left">4平方黑色光伏线 (直流耐压1kV)</td></tr><tr><td align="center">单相电缆</td><td align="center">GB&#x2F;T 5023.3-2008</td><td align="center">YJV-3x4</td><td align="left"><em>3根</em> 4平方线分别绝缘后外面有额外的保护层用于承受一定的力和额外的绝缘层, 颜色不一定 (比如我们的就是黄绿红的三相电缆拿来用了, 记得套热缩管)</td></tr><tr><td align="center">三相电缆</td><td align="center">GB&#x2F;T 5023.3-2008</td><td align="center">YJV-5x4</td><td align="left"><em>5根</em> 4平方线</td></tr></tbody></table><p>以及部分建设组组长 (bushi) 觉得华为会把所有东西 (包括但不限于螺栓, 光伏支架, 需要的线缆) 都做好送来. (别人哪知道我们要装在哪啊, 你想想啊…)</p><h3 id="不看安装说明-莫名自信"><a href="#不看安装说明-莫名自信" class="headerlink" title="不看安装说明, 莫名自信"></a>不看安装说明, 莫名自信</h3><p>总有人觉得装这些东西很容易, 安装说明也不好好看, 我讲了还不信, 还觉得是我的问题 (生气) 有人搞不清楚啥是通讯啥是通信啥是逆变器和储能之间通信啥是手机应用远程管理还觉得我说的不对 (持续输出) 有人明明没好好看说明还觉得自己好好看了还想指挥我 (恼) 还有人来插嘴觉得我就是不对没事找事 (唉) 有人觉得装好了就能发电了</p><p>要不是我看了安装说明, 现在怕是连逆变器和储能之间的通信线都没有 (继续生气)</p><p><strong>没接触过的东西老老实实看说明书行不行</strong>?</p><h3 id="拖延症-严重低估快递运输的时间"><a href="#拖延症-严重低估快递运输的时间" class="headerlink" title="拖延症, 严重低估快递运输的时间"></a>拖延症, 严重低估快递运输的时间</h3><p>我们的并离网盒子和光伏板 30 号才到… 之前也没有人去挖电缆沟… 由于气温较高电池包到现在都还没办法运过来… 我不好说</p><p><strong>去新疆的快递真的很慢</strong>!</p><h3 id="政治任务太多-预算太少"><a href="#政治任务太多-预算太少" class="headerlink" title="政治任务太多, 预算太少"></a>政治任务太多, 预算太少</h3><p>5w 的预算还要 5 度的储能 (最少 5 度), 怎么装光伏? 明明储能的效率是很低的还非要装, 没有储能就不是完整的光伏系统了是吧? 储能的配比 10%, 你倒是给我们 50kW 光伏的预算啊? 啊?</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>要对自己的智障程度有充分的估计. 干活和电路原理或者电路原理实验或者电机学完全是不一样的. 你永远不知道会出什么幺蛾子. 因此, 你必须有万全的准备.</p><p>你永远不知道上一个电工是什么牛鬼蛇神. 所以你不能相信直觉 - <strong>你能相信的只有手里的试电笔</strong>.</p><p>你需要了解整个校园的电路连接以方便施工的时候将影响范围收缩到最小.</p><p>当你发现你买的膨胀螺栓大了一号 (或者说打孔师傅的钻头小了一号), 你需要灵活变通 (详见 “大膨胀螺栓制造者”).</p><p>当你在墙上打孔打到一半的时候整个楼停电了, 你知道来活了 (bushi).</p><p>有时候电网的问题的源头并不是你自家, 一路修到发电厂也是有可能的…</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>本来我是打算考完低压电工作业再持证上岗的, 但是由于时间有点紧张, 我觉得应该也没啥问题, 就直接去了. 谁知道这地方乱七八糟一片… 确实, 这些边远地区 (其实就算是普通的农村的建筑) 的电都很可能十分混乱. 在接入新的设施的时候一定不要忘了 debug … 说不定新的设备会以某种奇妙的方式干扰到旧的电网呢</p><p>明年暑假我大概不会参加梦之网了 (毕竟其它的思政实践比梦之网还是舒服多了) 希望明年参加的同学们能从这里学到点什么</p><link rel="stylesheet" href="/css/folder.css" type="text/css"><script src="/js/folder.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
